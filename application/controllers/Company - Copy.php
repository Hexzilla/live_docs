<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Company extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Company_model');
		$this->load->model('Customer_model');
        $this->load->model('Employee_model');
        $this->load->model('Document_model');
    } 

    /*
     * Listing of company
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('company/index?');
        $config['total_rows'] = $this->Company_model->get_all_company_count();
        $this->pagination->initialize($config);

        $data['company'] = $this->Company_model->get_all_company($params);
		
/* 	echo"<pre>";
		print_r($data['company']);
		exit(); */
		
		         
        $data['_view'] = 'company/index';
        $this->load->view('layouts/main',$data);
    }

	
	
	function profile($companyid){
        $data['_view'] = 'company/profile';
        $data['company'] = $this->Company_model->get_companyprofile($companyid);
        if(!$data['company']){
            show_error('The company you are trying to view does not exist.');
        }
       // $data['companies'] = $this->Company_model->get_companies_by_customer_id($customer_id);
       // $company_ids = array_unique(array_column($data['companies'], 'companyid'));
      //  $data['employees'] = $this->Employee_model->get_employees_by_company_ids($company_ids);
      //  $data['documents'] = $this->Document_model->get_documents_by_company_ids($company_ids);
        //echo "<pre>";print_r($data['documents']);exit;
        $this->load->view('layouts/main',$data);
    }
	
	
	
    /*
     * Adding a new company
     */
    function add()
    {   
        if(!$this->auth->isAdd()){
            redirect('/');
        }
        $this->load->library('form_validation');

		$this->form_validation->set_rules('email','Email','valid_emails');
		$this->form_validation->set_rules('Name','Name','required');
		$this->form_validation->set_rules('CompType','CompType','required');
		$this->form_validation->set_rules('Customer_id[]','Customer Id','required');
         $data=array();
		$data['err_customer_id']="";	
	
		
		$Customer_id=$this->input->post('Customer_id[]');
		
		if((empty($Customer_id))&&($_POST)){
			
			$data['err_customer_id']="There is no customers defined, please add customer first";
		}			
	
		
		
		
		
		if($this->form_validation->run())     
        {   
	
	 
	
					$params = array(
						'Remarks' => $this->input->post('Remarks'),
						'CompType' => $this->input->post('CompType'),
						//'Customer_id' => $files['customer_id'],
						'Managerid' => $this->input->post('Managerid'),
						'Name' => $this->input->post('Name'),
						'companyNo' => $this->input->post('companyNo'),
						'CompReg' => $this->input->post('CompReg'),
						'email' => $this->input->post('email'),
					);
					
				$company_id = $this->Company_model->add_company($params);
				//  $insertId = $this->db->insert_id();
				  if(!empty($company_id)){
					  $count=count($Customer_id);
					  
				
											  
						 for ($x = 0; $x < $count; $x++) {
										$params2 = array('customer_id'=>$Customer_id[$x],'companyid'=>$company_id );
										$this->db->insert('get_company', $params2); 
						} 
					
				  }

					
		
            redirect('company/index');
        }
        else
        {
			$this->load->model('Comptype_model');
			$data['all_comptypes'] = $this->Comptype_model->get_all_comptypes();

			$this->load->model('Customer_model');
			$data['all_customers'] = $this->Customer_model->get_all_customers();

			$this->load->model('Employee_model');
			$data['all_employees'] = $this->Employee_model->get_all_managers();
            
            $data['_view'] = 'company/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a company
     */
    function edit($companyid)
    {   
        if(!$this->auth->isEdit()){
            redirect('/');
        }
        // check if the company exists before trying to edit it
		 $data=array();
          $data['company'] = $this->Company_model->get_company($companyid);
		  

		  
			$this->db->select('*');
			$this->db->from('customers');
			$this->db->join('get_company AS G','G.companyid=customers.customer_id');
			$this->db->where('companyid',$companyid);
			$custome =$this->db->get()->result_array();
			
			$data['custome']=$custome;

/* 
			echo"<pre>";
			print_r($custome);
			exit();   */
		
       
	    $data['save_done']="";
		$data['err_customer_id']="";		
		
		$Customer_id=$this->input->post('Customer_id[]');
		
		if((empty($Customer_id))&&(empty($custome))){
			
			$data['err_customer_id']="There is no customers defined, please add customer first";
		}			
  
					        
        if(!empty($data['company']['companyid']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('email','Email','valid_emails');
			$this->form_validation->set_rules('Name','Name','required');
			$this->form_validation->set_rules('CompType','CompType','required');
			//$this->form_validation->set_rules('Customer_id[]','Customer Id','required');
		
			if($this->form_validation->run())     
            {   
			

			
			
						$params = array(
							'Remarks' => $this->input->post('Remarks'),
							'CompType' => $this->input->post('CompType'),
							'Managerid' => $this->input->post('Managerid'),
							'Name' => $this->input->post('Name'),
							'companyNo' => $this->input->post('companyNo'),
							'CompReg' => $this->input->post('CompReg'),
							'email' => $this->input->post('email'),
						);

						$this->Company_model->update_company($companyid,$params);  



				  if(!empty($companyid)){
					  $count=count($Customer_id);
					
				
											  
						 for ($x = 0; $x < $count; $x++) {
							 $new_arrs=$this->db->get_where('get_company', array('customer_id'=>$Customer_id[$x],'companyid'=>$companyid ))->row_array();
							 if(empty($new_arrs)){
								 $params2 = array('customer_id'=>$Customer_id[$x],'companyid'=>$companyid );
										$this->db->insert('get_company', $params2);
								 
							 }
										 
						} 
					
				  }



              $data['save_done']="Save done successfully";


					
		        $this->load->model('Comptype_model');
				$data['all_comptypes'] = $this->Comptype_model->get_all_comptypes();

				$this->load->model('Customer_model');
				$data['all_customers'] = $this->Customer_model->get_all_customers();
				
				
				$this->db->select('G.customer_id,C.Customer_name,C.Nationality,C.email,C.mobile,C.IDcard,C.Position,C.Remarks,G.companyid,G.id');
				$this->db->from('customers AS C');
				$this->db->join('get_company AS G','C.customer_id=G.customer_id');
				$this->db->where('G.companyid',$companyid);
				$this->db->order_by("G.customer_id","ASC");
				$data['custome'] =$this->db->get()->result_array();
		
/*  				echo"<pre>";
				
				print_r($data['custome']);
exit(); */ 
				$this->load->model('Employee_model');
				$data['all_employees'] = $this->Employee_model->get_all_managers();

                $data['_view'] = 'company/edit';
                $this->load->view('layouts/main',$data);
            }
            else
            {
				$this->load->model('Comptype_model');
				$data['all_comptypes'] = $this->Comptype_model->get_all_comptypes();

				$this->load->model('Customer_model');
				$data['all_customers'] = $this->Customer_model->get_all_customers();
				
				
				$this->db->select('G.customer_id,C.Customer_name,C.Nationality,C.email,C.mobile,C.IDcard,C.Position,C.Remarks,G.companyid,G.id');
				$this->db->from('customers AS C');
				$this->db->join('get_company AS G','C.customer_id=G.customer_id');
				$this->db->where('G.companyid',$companyid);
				$this->db->order_by("G.customer_id","ASC");
				$data['custome'] =$this->db->get()->result_array();
		
/*  				echo"<pre>";
				
				print_r($data['custome']);
exit(); */ 
				$this->load->model('Employee_model');
				$data['all_employees'] = $this->Employee_model->get_all_managers();

                $data['_view'] = 'company/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The company you are trying to edit does not exist.');
    } 

    /*
     * Deleting company
     */
	 
	 
	 
	function delete_client_from_company(){
		
		$a_href=$this->input->post('a_href');
		if(!empty($a_href)){
			
				$this->db->where('id', $a_href);
				$this->db->delete('get_company');	
			
			
			
		}
		
	} 
	 
	

    function get_customer()
    {
	
                $q = strtolower($_POST["keyword"]);
				
				$role_id = $_POST["role_id"];
				$myrole="";
				if(!empty($role_id)){
					$explode=explode(",",$role_id);
					if(!empty($explode)){
						foreach ($explode as $key => $value) {
							$myrole=$myrole.'customer_id !='.$value.' and ';
						}
					}
					
				}
				
				
				
				if (!$q) return;

			$sql = "select * from customers where ".$myrole." 1=1 and Customer_name LIKE '%$q%' ORDER BY Customer_name LIMIT 0,6";
				$query = $this->db->query($sql)->result_array();
				if(!empty($query)){
				
?>
<ul id="country-list">
<?php
foreach($query as $country) {
?>
<li onClick="selectCountry('<?php echo $country["customer_id"]; ?>,<?php echo $country["Customer_name"]; ?>');"><?php echo $country["Customer_name"]; ?></li>
<?php } ?>
</ul>
						
						
					
						
						
						
		<?php				
						
				
				}
				
				
    }
	
	
	
	 
	 
	 
    function remove($companyid)
    {
        if(!$this->auth->isDelete()){
            redirect('/');
        }
        $company = $this->Company_model->get_company($companyid);

        // check if the company exists before trying to delete it
        if(isset($company['companyid']))
        {
            $this->Company_model->delete_company($companyid);
			
				$this->db->where('companyid', $companyid);
				$this->db->delete('get_company');	
			
			
            redirect('company/index');
        }
        else
            show_error('The company you are trying to delete does not exist.');
    }
    
}
