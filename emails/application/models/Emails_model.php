<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Emails_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }
    
    
    
    public function getRows($table,$conditions = array()){
        $sql = 'SELECT ';
        $sql .= array_key_exists("select",$conditions)?$conditions['select']:'*';
        $sql .= ' FROM '.$table;
        if(array_key_exists("where",$conditions)){
            $sql .= ' WHERE ';
            $i = 0;
            foreach($conditions['where'] as $key => $value){
                $pre = ($i > 0)?' AND ':'';
                $sql .= $pre.$key." = '".$value."'";
                $i++;
            }
        }
        if(array_key_exists("wherelike",$conditions)){
            $sql .= ' WHERE ';
            $i = 0;
            foreach($conditions['wherelike'] as $key => $value){
                $pre = ($i > 0)?' AND ':'';
                $sql .= $pre.$key." like '%".$value."%'";
                $i++;
            }
        }
        if(array_key_exists("wherein",$conditions)){
            $sql .= ' WHERE ';
            $i = 0;
            foreach($conditions['wherein'] as $key => $value){
                $pre = ($i > 0)?' AND ':'';
                $sql .= $pre.$key." in (".$value.")";
                $i++;
            }
        }        
        if(array_key_exists("order_by",$conditions)){
            $sql .= ' ORDER BY '.$conditions['order_by']; 
        }
        
        if(array_key_exists("start",$conditions) && array_key_exists("limit",$conditions)){
            $sql .= ' LIMIT '.$conditions['start'].','.$conditions['limit']; 
        }elseif(!array_key_exists("start",$conditions) && array_key_exists("limit",$conditions)){
            $sql .= ' LIMIT '.$conditions['limit']; 
        }
        
        $query = $this->db->query($sql);
//        $query->execute();
//        $data=$sql;
        
            
                $data = $query->result_array();
            

//                return $sql;        
        return !empty($data)?$data:false;
    }
    
     public function runSQL($sql){
       $query = $this->db->query($sql);
       $data = $query->result_array();
       return !empty($data)?$data:false;
     }    
    
    
    public function update($table,$data,$conditions){
        if(!empty($data) && is_array($data)){
            $colvalSet = '';
            $whereSql = '';
            $i = 0;
//            if(!array_key_exists('modified',$data)){
//                $data['modified'] = date("Y-m-d H:i:s");
//            }
            foreach($data as $key=>$val){
                $pre = ($i > 0)?', ':'';
                $val = (($val));
                $colvalSet .= $pre.$key."='".$val."'";     
                $i++;
            }
            if(!empty($conditions)&& is_array($conditions)){
                $whereSql .= ' WHERE ';
                $i = 0;
                foreach($conditions as $key => $value){
                    $pre = ($i > 0)?' AND ':'';
                    $whereSql .= $pre.$key." = '".$value."'";
                    $i++;
                }
            }
            $sql = "UPDATE ".$table." SET ".$colvalSet.$whereSql;
//            return $sql;
            $update = $this->db->query($sql);
            return $update?TRUE:false;
        }else{
//            return false;
        }
    }
    
    public function insert($table,$data){
        if(!empty($data) && is_array($data)){
            $columns = '';
            $values  = '';
            $i = 0;
            if(!array_key_exists('created',$data)){
                $data['created'] = date("Y-m-d H:i:s");
            }
            if(!array_key_exists('modified',$data)){
                $data['modified'] = date("Y-m-d H:i:s");
            }

            $columnString = implode(',', array_keys($data));
            $valueString = ":".implode(',:', array_keys($data));
            $sql = "INSERT INTO ".$table." (".$columnString.") VALUES (".$valueString.")";
            
            foreach($data as $key=>$val){
                $val = htmlspecialchars(($val));
                $sql= str_replace(':'.$key, "'$val'", $sql);
            }
//            $insert = $query->execute();
            $query = $this->db->query($sql);
            if($query){
                $data['ID'] = $this->db->insert_id();
                return $data;
            }else{
                return false;
            }
        }else{
            return false;
        }
    }
    
    public function delete($tbl, $id){
      $sql="DELETE from $tbl where ID = '$id'";
      $query = $this->db->query($sql);
    }  
     public function delete2($tbl, $key, $id){
      $sql="DELETE from $tbl where $key = '$id'";
      $query = $this->db->query($sql);
    }  
    /*
     * Get emailgroup by groupid
     */
    function get_emailgroup($groupid)
    {
        return $this->db->get_where('emailgroups',array('groupid'=>$groupid))->row_array();
    }
    
    /*
     * Get all emailgroups count
     */
    function get_all_emailgroups_count()
    {
        $this->db->from('emailgroups');
        return $this->db->count_all_results();
    }
        
    /*
     * Get all emailgroups
     */
    function get_all_emailgroups($params = array())
    {
        $this->db->order_by('groupid', 'desc');
        if(isset($params) && !empty($params))
        {
            $this->db->limit($params['limit'], $params['offset']);
        }
        return $this->db->get('emailgroups')->result_array();
    }
        
    /*
     * function to add new emailgroup
     */
    function add_emailgroup($params)
    {
        $this->db->insert('emailgroups',$params);
        return $this->db->insert_id();
    }
    
    /*
     * function to update emailgroup
     */
    function update_emailgroup($groupid,$params)
    {
        $this->db->where('groupid',$groupid);
        return $this->db->update('emailgroups',$params);
    }
    
    /*
     * function to delete emailgroup
     */
    function delete_emailgroup($groupid)
    {
        return $this->db->delete('emailgroups',array('groupid'=>$groupid));
    }
    
    
    
    
 function get_letter($letterid)
    {
        return $this->db->get_where('letters',array('letterid'=>$letterid))->row_array();
    }
    
    /*
     * Get all letters count
     */
    function get_all_letters_count()
    {
        $this->db->from('letters');
        return $this->db->count_all_results();
    }
        
    /*
     * Get all letters
     */
    function get_all_letters($params = array())
    {
        $this->db->order_by('letterid', 'desc');
        if(isset($params) && !empty($params))
        {
            $this->db->limit($params['limit'], $params['offset']);
        }
       // return $this->db->get('letters')->result_array();
	   
	    $this->db->select('letters.letterid,letters.subject,letters.sdate ,letters.recipients,emailstatus.status as status');
		 $this->db->from('letters');
        //$this->db->join('customers', 'company.customer_id = customers.customer_id');
        $this->db->join('emailstatus', 'letters.statusid = emailstatus.statusid', 'inner');
       
        $datas = $this->db->get()->result_array();
        return $datas;
    }
        
    /*
     * function to add new letter
     */
    function add_letter($params)
    {
        $this->db->insert('letters',$params);
        return $this->db->insert_id();
    }
    
    /*
     * function to update letter
     */
    function update_letter($letterid,$params)
    {
        $this->db->where('letterid',$letterid);
        return $this->db->update('letters',$params);
    }
    
    /*
     * function to delete letter
     */
    function delete_letter($letterid)
    {
        return $this->db->delete('letters',array('letterid'=>$letterid));
    }    
}
